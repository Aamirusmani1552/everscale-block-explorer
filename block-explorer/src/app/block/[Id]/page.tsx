"use client";
import { FC, ReactElement, useState } from "react";
import {
  TypographyH3,
  TypographyMutedH3,
  TypographyTd,
  TypographyTr,
} from "../../../../components/custom/Typography";
import { useQuery } from "@apollo/client";
import ClipboardCopyButton from "../../../../components/custom/ClipBoardCopy";
import { GetBlockData } from "@/graphql/GetBlockData";
import Loading from "../../../../components/custom/Loading";

type Props = {
  params: {
    Id: string;
  };
};

const Block: FC<Props> = ({ params }): ReactElement => {
  const { data, error, loading } = useQuery(GetBlockData, {
    variables: { hash: params.Id },
  });

  console.log(data);

  if (!data) {
    return <Loading />;
  }

  const fields = [
    "Id",
    "Shard",
    "Transactions Count",
    "File Hash",
    "After Merge",
    "After Split",
    "Before Split",
    "End Logical time",
    "Want Merge",
    "Want Split",
    "Time",
    "Vertical Sequence No.",
    "Global Id",
    "Validator List Hash Short",
    "Generated by Software Version",
  ];

  const values = [
    data.blockchain?.block?.id.toString().replace("block/", ""),
    data.blockchain?.block?.shard,
    data.blockchain?.block?.tr_count,
    data.blockchain?.block?.file_hash ? data.blockchain.block.file_hash : "NA",
    data.blockchain?.block?.after_merge ? "True" : "False",
    data.blockchain?.block?.after_split ? "True" : "False",
    data.blockchain?.block?.before_split ? "True" : "False",
    parseInt(data.blockchain?.block?.end_lt?.toString()!),
    data.blockchain?.block?.want_merge ? "True" : "False",
    data.blockchain?.block?.want_split ? "True" : "False",
    data.blockchain?.block?.gen_utime,
    data.blockchain?.block?.vert_seq_no,
    data.blockchain?.block?.global_id,
    data.blockchain?.block?.gen_validator_list_hash_short,
    data.blockchain?.block?.gen_software_version,
  ];

  const actualValues = [
    data.blockchain?.block?.id.toString().replace("block/", ""),
    data.blockchain?.block?.shard,
    data.blockchain?.block?.tr_count,
    data.blockchain?.block?.file_hash ? data.blockchain.block.file_hash : "NA",
    data.blockchain?.block?.after_merge ? "True" : "False",
    data.blockchain?.block?.after_split ? "True" : "False",
    data.blockchain?.block?.before_split ? "True" : "False",
    parseInt(data.blockchain?.block?.end_lt?.toString()!),
    data.blockchain?.block?.want_merge,
    data.blockchain?.block?.want_split,
    data.blockchain?.block?.gen_utime,
    data.blockchain?.block?.vert_seq_no,
    data.blockchain?.block?.global_id,
    data.blockchain?.block?.gen_validator_list_hash_short,
    data.blockchain?.block?.gen_software_version,
  ];

  return (
    <section>
      <div className="flex gap-2 items-center mt-4">
        <TypographyH3>Block Id:</TypographyH3>
        <TypographyMutedH3>
          {params.Id.slice(0, 8) + "..." + params.Id.slice(-8)}
        </TypographyMutedH3>
      </div>
      <br></br>
      <div className="relative overflow-x-auto rounded-sm">
        <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"></thead>
          <tbody>
            {fields.map((f, i) => {
              return (
                <TypographyTr key={i}>
                  <TypographyTd>{f}</TypographyTd>
                  <TypographyTd>
                    <div className="flex items-center justify-between group">
                      <span className="cursor-pointer">{values[i]}</span>{" "}
                      <span className="hidden group-hover:block absolute right-3">
                        <ClipboardCopyButton
                          text={actualValues[i]?.toString()!}
                        />
                      </span>
                    </div>
                  </TypographyTd>
                </TypographyTr>
              );
            })}
          </tbody>
        </table>
      </div>
      <br />
    </section>
  );
};

export default Block;
